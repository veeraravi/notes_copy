import org.apache.spark.sql.{SparkSession, DataFrame}
import org.apache.spark.sql.functions._

// Create Spark session
val spark = SparkSession.builder.appName("DataFrameOperations").getOrCreate()

// Create a DataFrame with 5 columns and 5 rows
val data = Seq(
  (1, 10, 20, 30, 40),
  (2, 15, 25, 35, 45),
  (3, 20, 30, 40, 50),
  (4, 25, 35, 45, 55),
  (5, 30, 40, 50, 60)
)

val df = spark.createDataFrame(data).toDF("col1", "col2", "col3", "col4", "col5")

// Split the string and create a temporary view
val str = "sum(col1)|min(col2)|max(col3)"
val aggregations = str.split("\\|").map(expr)
df.createOrReplaceTempView("tbl1")

// Execute SQL query and create a new DataFrame
val resdf: DataFrame = spark.sql(s"SELECT ${aggregations.mkString(", ")} FROM tbl1")

// Create a new column with structtype
val dataControls = struct(resdf.columns.map(col): _*)
val result = resdf.withColumn("datacontrols", dataControls)

// Show the result
result.show()

// Convert result DataFrame to JSON and assign to a variable
val jsonResult: String = result.toJSON.collect().mkString("[", ",", "]")

// Print or use the jsonResult variable as needed
println(jsonResult)

val resdf: DataFrame = spark.sql(s"SELECT ${aggregations.map(expr => s"${expr.sql} as ${expr.prettyName}").mkString(", ")} FROM tbl1")


import org.apache.spark.sql.{SparkSession, DataFrame}
import org.apache.spark.sql.functions._

// Assuming you already have a SparkSession named 'spark'
val spark = SparkSession.builder.appName("DataFrameOperations").getOrCreate()

// Create a DataFrame with 5 columns and 5 rows
val data = Seq(
  (1, 10, 20, 30, 40),
  (2, 15, 25, 35, 45),
  (3, 20, 30, 40, 50),
  (4, 25, 35, 45, 55),
  (5, 30, 40, 50, 60)
)

val df = spark.createDataFrame(data).toDF("col1", "col2", "col3", "col4", "col5")

// Split the string and create a temporary view
val str = "sum(col1)|min(col2)|max(col3)"
val aggregations = str.split("\\|").map(expr)

// Create temporary view
df.createOrReplaceTempView("tbl1")

// Construct select expressions dynamically with aliasing
val selectExpressions = aggregations.zipWithIndex.map { case (expr, index) => s"${expr.sql} as col${index + 1}" }
val selectClause = selectExpressions.mkString(", ")

// Execute SQL query and create a new DataFrame
val resdf: DataFrame = spark.sql(s"SELECT $selectClause FROM tbl1")

// Show the result
resdf.show()
import org.apache.spark.sql.{SparkSession, Row}
import org.apache.spark.sql.functions._
import org.apache.spark.sql.types._

// Create a Spark session
val spark = SparkSession.builder().appName("JsonStringToStructType").master("local").getOrCreate()

// Sample DataFrame with a JSON string column
val jsonData = Seq(
  """{"id": 1, "name": "John"}""",
  """{"id": 2, "name": "Alice"}""",
  """{"id": 3, "name": "Bob"}"""
)

val df = spark.createDataFrame(Seq((1, jsonData(0)), (2, jsonData(1)), (3, jsonData(2))))
  .toDF("id", "json_data")

// Define the schema for the JSON data
val jsonSchema = StructType(Seq(
  StructField("id", IntegerType, nullable = true),
  StructField("name", StringType, nullable = true)
))

// Convert JSON string column to struct type column
val dfWithJsonStruct = df.withColumn("json_struct", from_json(col("json_data"), jsonSchema))

// Show the resulting DataFrame
dfWithJsonStruct.show(truncate = false)


import org.apache.spark.sql.SparkSession
import org.apache.spark.sql.functions._
import org.apache.spark.sql.types._

// Create a Spark session
val spark = SparkSession.builder().appName("DynamicStructType").master("local").getOrCreate()

// Sample DataFrame with a JSON string
val jsonData = """{"sum(col1)":6,"min(col2)":10,"max(col3)":100}"""

// Parse JSON string to extract column names and types
val jsonMap = spark.read.json(Seq(jsonData).toDS).collect()(0).getValuesMap[String]

// Create StructType dynamically
val dynamicSchema = StructType(jsonMap.map { case (columnName, dataType) =>
  StructField(columnName, dataType match {
    case "bigint" => LongType
    case "double" => DoubleType
    case _ => StringType  // Default to StringType for unknown types
  }, nullable = true)
}.toSeq)

// Print the dynamically created schema
println("Dynamically Created StructType:")
dynamicSchema.printTreeString()

// Now you can use this dynamicSchema for your DataFrame
------------------------------------------------------------


import org.apache.spark.sql.{SparkSession, DataFrame}
import org.apache.spark.sql.functions._

// Assuming caseclass1 and caseclass2 are defined as case classes
case class CaseClass1(a: Int, b: Int, c: Int)
case class CaseClass2(x: Int, y: Int, z: Int)

val spark = SparkSession.builder().appName("Example").getOrCreate()

val a = 1 // Assuming 'a' is defined

val msg: Array[Any] = (a == 1) match {
  case true => Array(CaseClass1(1, 2, 3))
  case false => Array(CaseClass2(2, 3, 4))
}

// Assuming you want to convert the array to a DataFrame
val df: DataFrame = spark.createDataFrame(msg)

df.show()
============================================================

import org.apache.spark.sql.{SparkSession, DataFrame}
import org.apache.spark.sql.functions._

// Assuming caseclass1 and caseclass2 are defined as case classes
case class CaseClass1(a: Int, b: Int, c: Int)
case class CaseClass2(x: Int, y: Int, z: Int)

val spark = SparkSession.builder().appName("Example").getOrCreate()

val a = 1 // Assuming 'a' is defined

val msg = (a == 1) match {
  case true => Seq(CaseClass1(1, 2, 3))
  case false => Seq(CaseClass2(2, 3, 4))
}

// Use the createDataFrame method with Encoders.product
val df: DataFrame = spark.createDataFrame(msg)

df.show()


    val xmlString ="""<employees><employee><id>1</id><name>John Doe</name><dept>IT</dept><salary>50000</salary></employee><employee><id>2</id><name>Jane Smith</name><dept>HR</dept><salary>55000</salary></employee><employee><id>3</id><name>Bob Johnson</name><dept>Finance</dept><salary>60000</salary></employee></employees>"""


    val modifiedString = xmlString.split("</employee>")
    var res = modifiedString
      .zipWithIndex
      .map { case (part, index) =>
        if (index == modifiedString.length - 1) part else part + """<company>bigdatasolutions</company><city>banaglore</city>"""
      }
      .mkString("</employee>")

    println(res)


